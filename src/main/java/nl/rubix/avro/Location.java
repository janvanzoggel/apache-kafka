/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nl.rubix.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8757968654533937840L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"nl.rubix.avro\",\"fields\":[{\"name\":\"vehicle_id\",\"type\":\"string\",\"doc\":\"id of the vehicle\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time in seconds\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longtitude\",\"type\":\"double\"}],\"doc:\":\"A schema for vehicle movement events\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** id of the vehicle */
  @Deprecated public java.lang.CharSequence vehicle_id;
  /** time in seconds */
  @Deprecated public long timestamp;
  @Deprecated public double latitude;
  @Deprecated public double longtitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Location() {}

  /**
   * All-args constructor.
   * @param vehicle_id id of the vehicle
   * @param timestamp time in seconds
   * @param latitude The new value for latitude
   * @param longtitude The new value for longtitude
   */
  public Location(java.lang.CharSequence vehicle_id, java.lang.Long timestamp, java.lang.Double latitude, java.lang.Double longtitude) {
    this.vehicle_id = vehicle_id;
    this.timestamp = timestamp;
    this.latitude = latitude;
    this.longtitude = longtitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicle_id;
    case 1: return timestamp;
    case 2: return latitude;
    case 3: return longtitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicle_id = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: latitude = (java.lang.Double)value$; break;
    case 3: longtitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vehicle_id' field.
   * @return id of the vehicle
   */
  public java.lang.CharSequence getVehicleId() {
    return vehicle_id;
  }

  /**
   * Sets the value of the 'vehicle_id' field.
   * id of the vehicle
   * @param value the value to set.
   */
  public void setVehicleId(java.lang.CharSequence value) {
    this.vehicle_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return time in seconds
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * time in seconds
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longtitude' field.
   * @return The value of the 'longtitude' field.
   */
  public java.lang.Double getLongtitude() {
    return longtitude;
  }

  /**
   * Sets the value of the 'longtitude' field.
   * @param value the value to set.
   */
  public void setLongtitude(java.lang.Double value) {
    this.longtitude = value;
  }

  /**
   * Creates a new Location RecordBuilder.
   * @return A new Location RecordBuilder
   */
  public static nl.rubix.avro.Location.Builder newBuilder() {
    return new nl.rubix.avro.Location.Builder();
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Location RecordBuilder
   */
  public static nl.rubix.avro.Location.Builder newBuilder(nl.rubix.avro.Location.Builder other) {
    return new nl.rubix.avro.Location.Builder(other);
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Location instance.
   * @param other The existing instance to copy.
   * @return A new Location RecordBuilder
   */
  public static nl.rubix.avro.Location.Builder newBuilder(nl.rubix.avro.Location other) {
    return new nl.rubix.avro.Location.Builder(other);
  }

  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    /** id of the vehicle */
    private java.lang.CharSequence vehicle_id;
    /** time in seconds */
    private long timestamp;
    private double latitude;
    private double longtitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nl.rubix.avro.Location.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicle_id)) {
        this.vehicle_id = data().deepCopy(fields()[0].schema(), other.vehicle_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longtitude)) {
        this.longtitude = data().deepCopy(fields()[3].schema(), other.longtitude);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Location instance
     * @param other The existing instance to copy.
     */
    private Builder(nl.rubix.avro.Location other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.vehicle_id)) {
        this.vehicle_id = data().deepCopy(fields()[0].schema(), other.vehicle_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longtitude)) {
        this.longtitude = data().deepCopy(fields()[3].schema(), other.longtitude);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'vehicle_id' field.
      * id of the vehicle
      * @return The value.
      */
    public java.lang.CharSequence getVehicleId() {
      return vehicle_id;
    }

    /**
      * Sets the value of the 'vehicle_id' field.
      * id of the vehicle
      * @param value The value of 'vehicle_id'.
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder setVehicleId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.vehicle_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle_id' field has been set.
      * id of the vehicle
      * @return True if the 'vehicle_id' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vehicle_id' field.
      * id of the vehicle
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder clearVehicleId() {
      vehicle_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * time in seconds
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * time in seconds
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * time in seconds
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * time in seconds
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder setLatitude(double value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder clearLatitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longtitude' field.
      * @return The value.
      */
    public java.lang.Double getLongtitude() {
      return longtitude;
    }

    /**
      * Sets the value of the 'longtitude' field.
      * @param value The value of 'longtitude'.
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder setLongtitude(double value) {
      validate(fields()[3], value);
      this.longtitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longtitude' field has been set.
      * @return True if the 'longtitude' field has been set, false otherwise.
      */
    public boolean hasLongtitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longtitude' field.
      * @return This builder.
      */
    public nl.rubix.avro.Location.Builder clearLongtitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Location build() {
      try {
        Location record = new Location();
        record.vehicle_id = fieldSetFlags()[0] ? this.vehicle_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.Double) defaultValue(fields()[2]);
        record.longtitude = fieldSetFlags()[3] ? this.longtitude : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
